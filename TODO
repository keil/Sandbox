*** Bugs ***

 - revert
 - prestate snapüshot
 - trap enimerate
 - check rollback in transparent mode

- eval?
- clone?
- new engine mode?
- unwrap on return

- trabsaction
- tollback muss effect liste zurücksetzen

*** Minor Features *** 

- Define a diff-function that checks (recursively) for modifications from the outside (based on effects) and modifications from inside.

- Why is differences not a getter?

- If a sandbox commits, read effects have to be removed or considered when calculating conflicts.

- Conflicts may compare values
(maybe introduce a raw mode, that compares the values recursively -- based on effects)?

- Make sbx.conflicts(sbx2); -- to -- sbx.conflictsWith(sbx2);

- Add an event observer, for example ACP/TratJS to protext ressources

- Merge from TreatJS/ degubber/ out


*** Reset *** 
 - But this is similar to the use of new Sandbox?
 - Partial reset of a value

*** Carbon Copy/ Transparent ***

 - scope and target are identical
 - but the effect system can restore values
 - TEST THIS


*Rollback*

 - Effect e on x,
   = set x to the state before e

 - Sandbox (pre state snapshot),
   = set a sandbox value to the outside value


*Effects*

- Conflict detection


*Test

 - seal, freeze

 - Test function which is called twice and which writes values
   (e.g. a counter)


*Behavior*

 - Wrap/Decompile functions
   ~ no return wrap
   ~ decompile in proxy required because of an external value


*Demo*

 - Demo with confusing behavior
   ~ for..in (enumerate/iterate)
   ~ freeze
   ~ seal
   ~ isExtensible
   ~ typeof/instanceof in combination with Object.GetPrototypeOf and A.prototype


*Rollback*

 - Implement the possibility to be transparent with respect to the normal execution and to rollback effects.


*valueOf*

 - Use valueOf to wrap primitive values.
