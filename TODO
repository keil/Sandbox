- defien a diff function that checks recursiflt if differences exist, based on the write effects that are inside of teh sandbox, 
value that are not writte are guaranteed to be idetnical.

- why is differences not a getter?

- wenn eine sandbox commited, read effects muessen geloescht werden, oder bei der berechnung von conflickten beachtet werden

- can conflics compare values
(maybe introduce a raw mode, that compares the values recursifly-- based on effect informations)?

make sbx.conflicts(sbx2);
to sbx.conflictsWith(sbx2);

warum hat xsbx.wrap kein this argument .. sbx.wrap(sbxroot)
anstatt sbx.wrap(sbxroot, this)


* Reature, add an event observer, for example ACP to protext ressources ..

* merge from TreatJS/ degubber/ out
* bring new version

*BUG*

Side Effects possible when using getter or setter function,
detect getter with 

var desc = Object.getOwnPropertyDescriptor(target, 'a');
print(desc.value);
print(desc.writable);
print(desc.get);
print(desc.set);
print(desc.configurable);
print(desc.enumerable);

and call in sandbox;

*Extend Prototype*

- extend function prototype

*Reset*
 - But this is similar to the use of new Sandbox?
 - Partial reset of a value

*Carbon Copy*

 - scope and target are identical
 - but the effect system can restore values
 - TEST THIS


*Rollback*

 - Effect e on x,
   = set x to the state before e

 - Sandbox,
   = set a sandbox value to the outside value


*Benchmark*

- Ocaten Benchmark
- JS Bench


*Effects*

- Conflict detection


*Test

 - seal, freeze

 - Test function which is called twice and which writes values
   (e.g. a counter)


*Behavior*

 - What to do of (name in target)===false?
   Because of access chains prevent break out or return undefined.
   Test this.

 - Wrap/Decompile functions
   ~ no return wrap
   ~ decompile in proxy required because of an external value


*Demo*

 - Demo with confusing behavior
   ~ for..in (enumerate/iterate)
   ~ freeze
   ~ seal
   ~ isExtensible
   ~ typeof/instanceof in combination with Object.GetPrototypeOf and A.prototype

*Eval*

js> print(Function.prototype.toString.apply(eval));
 function eval() {
     [native code]
 }


*Rollback*

 - Implement the possibility to be transparent with respect to the normal execution and to rollback effects.


*valueOf*

 - Use valueOf to wrap primitive values.
