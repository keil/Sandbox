*Pre State Snapshot*

 a) Clone global when installing a sandbox will build an shadow tree
    Some unused values will also be wrapped (recursively)

 b) Parial wrapping and merging 
    Scope (clone has to be od the same type/ instance of the origin)
    Function Prototypes has to be set when decompiling a value

    origin instead of target


*Transactions*

A transaction is an operation CMD (command) affected on a target value:

Traget  := Proxy target (origin)
CMD     := Proxy trap value
Origin  := Origin Value before CMD applies
Value   := Value
Stamp   := Timestamp

- commit 
- conflict
- diff
- rollback
- begintransaction, name

*Read conflics*

A value read access is after a value write access.
--> This makes it nececessery to compare sandbox executions

(give every objet an id)

- Sandbox
  - diff/commit/transactions/conflicts
  - List of transaction
    Target -> Transaction

*Eval*

js> print(Function.prototype.toString.apply(eval));
function eval() {
    [native code]
}


*Rollback*

Implement the possibility to be transparent with respect to the normal execution and to rollback effects.

*valueOf*

use valueOf to wrap primitive values
4711
js> x+x;
9422


// TODO,disbale effect logging

*Benchmark*

- Octane
- JSBench



// test Inside Functions




# Project Name

Working Name:
* TreatJS-Sandbox (TJSSB)


Final Name:
* Decent JS
* Sandbox JS
* JS TM (JS Transactional Memory/SDandbox)


File and DataStructure


/src
  /...

/test
  /membrane         - Membrane tests
  /...

https://bugzilla.mozilla.org/show_bug.cgi?id=783829#c4

For ( in ) is not supported
